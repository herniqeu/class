// Exercises:

// Increments an Integer
// int(false, 1)     = +0
// int(false, 2)     = -1
// int(true,  2)     = +3
Inte.inc (a: Inte): Inte  
Inte.inc (Inte.pos a) = (Inte.pos(Pos.succ a))
Inte.inc (Inte.neg (Neg.one)) = (Inte.pos(Pos.zero))
Inte.inc (Inte.neg (Neg.pred a)) = (Inte.neg(a))

// Decrements an Integer
// int(false, 1) = -2
// int(true,  2) = +1
// int(true,  0) = -1
Inte.dec (a: Inte): Inte
Inte.dec (Inte.pos (Pos.succ a)) = (Inte.pos(a))
Inte.dec (Inte.pos (Pos.zero)) = (Inte.neg(Neg.one))
Inte.dec (Inte.neg a) = (Inte.neg(Neg.pred a))

// Doubles an Integer
// int(false, 4) = -8
// int(false, 1) = -2
// int(true,  2) = +4
Inte.dbl (a: Inte): Inte 
Inte.dbl (Inte.pos (Pos.zero)) = (Inte.pos(Pos.zero))
Inte.dbl (Inte.pos (Pos.succ a)) = (Inte.inc(Inte.inc(Inte.dbl(Inte.pos a))))
Inte.dbl (Inte.neg (Neg.one)) = (Inte.neg(Neg.pred(Neg.one)))
Inte.dbl (Inte.neg (Neg.pred a))  = (Inte.dec(Inte.dec(Inte.dbl(Inte.neg a))))

// Adds two Integers
// int(false, 4) + int(false, 2) = -6
// int(false, 4) + int(true,  2) = -2
Inte.add (a: Inte) (b: Inte) : Inte
Inte.add Inte.pos (Pos.zero) b = b
Inte.add (Inte.neg (Neg.one)) b = Inte.dec b
Inte.add (Inte.pos (Pos.succ a)) (Inte.pos  b) = (Inte.inc(Inte.add (Inte.pos a) (Inte.pos b)))
Inte.add (Inte.pos (Pos.succ a)) (Inte.neg (Neg.pred b)) = (Inte.add (Inte.pos a) (Inte.neg b))
Inte.add (Inte.neg (Neg.pred a)) (Inte.pos (Pos.succ b)) = (Inte.add (Inte.neg a) (Inte.pos b))
Inte.add (Inte.neg (Neg.pred a)) (Inte.neg b) = (Inte.dec(Inte.add (Inte.neg a) (Inte.neg b)))
Inte.add a b = Inte.pos(Pos.zero)

// Multiplies two Integers
// int(false, 2) * int(true, 3)  = -6
// int(false, 4) * int(false, 5) = +20
Inte.mul  (a: Inte) (b: Inte) : Inte
Inte.mul (Inte.pos (Pos.zero)) b = Inte.pos (Pos.zero)
Inte.mul a (Inte.pos (Pos.zero)) = Inte.pos (Pos.zero)
Inte.mul (Inte.neg (Neg.one)) (Inte.neg(Neg.one)) = Inte.pos (Pos.succ(Pos.zero))
Inte.mul (Inte.neg (Neg.one)) (Inte.neg(Neg.pred b)) = (Inte.inc (Inte.mul (Inte.neg (Neg.one)) (Inte.neg b)))
Inte.mul (Inte.neg (Neg.pred a)) (Inte.neg b) = (Inte.sub (Inte.mul (Inte.neg a) (Inte.neg b)) (Inte.neg b))
Inte.mul (Inte.neg (Neg.pred a)) (Inte.neg(Neg.one)) = (Inte.inc (Inte.mul (Inte.neg a) (Inte.neg (Neg.one))))
Inte.mul (Inte.neg a) (Inte.pos (Pos.succ b)) = (Inte.add (Inte.mul (Inte.neg a) (Inte.pos b)) (Inte.neg a))
Inte.mul (Inte.pos (Pos.succ a))  (Inte.pos b) = (Inte.add (Inte.mul (Inte.pos a) (Inte.pos b)) (Inte.pos b))
Inte.mul (Inte.pos (Pos.succ a)) (Inte.neg b) = (Inte.add (Inte.mul (Inte.pos a) (Inte.neg b)) (Inte.neg b))

// Subtracts two Integers
// int(false, 6) - int(false, 6) = +0
// int(false, 4) - int(false, 6) = +2
Inte.sub  (a: Inte) (b: Inte) : Inte  
Inte.sub  a (Inte.neg (Neg.one)) = (Inte.inc a)
Inte.sub  a (Inte.pos (Pos.zero)) = a
Inte.sub (Inte.pos (Pos.zero)) (Inte.neg b) = (Inte.neg b) 
Inte.sub (Inte.neg (Neg.one)) (Inte.neg (Neg.one)) = Inte.pos(Pos.zero)
Inte.sub (Inte.neg (Neg.one)) (Inte.pos (Pos.succ b)) = Inte.dec(Inte.sub (Inte.neg (Neg.one)) (Inte.pos b))
Inte.sub (Inte.pos a) (Inte.neg (Neg.pred b)) = Inte.inc(Inte.sub (Inte.pos a) (Inte.neg b))
Inte.sub (Inte.neg (Neg.pred a)) (Inte.pos (Pos.succ b)) = Inte.dec(Inte.dec(Inte.sub (Inte.neg a) (Inte.pos b)))
Inte.sub (Inte.pos (Pos.succ a)) (Inte.neg  b) = Inte.inc(Inte.sub (Inte.pos a) (Inte.neg b))
Inte.sub (Inte.neg (Neg.one)) (Inte.neg (Neg.pred b)) = Inte.inc(Inte.sub (Inte.neg (Neg.one)) (Inte.neg b))
Inte.sub (Inte.pos (Pos.zero)) (Inte.pos (Pos.succ b)) = Inte.dec(Inte.sub (Inte.pos (Pos.zero)) (Inte.pos b))
Inte.sub (Inte.neg (Neg.pred a)) (Inte.neg (Neg.pred b)) = (Inte.sub (Inte.neg a) (Inte.neg b))
Inte.sub (Inte.pos (Pos.succ a)) (Inte.pos (Pos.succ b)) = (Inte.sub (Inte.pos a) (Inte.pos b))


// Equal
Inte.eql (a: Inte) (b: Inte) : Bool 
Inte.eql (Inte.pos (Pos.zero)) (Inte.pos (Pos.zero)) = Bool.true
Inte.eql (Inte.neg (Neg.one)) (Inte.neg (Neg.one)) = Bool.true
Inte.eql (Inte.pos (Pos.succ a)) (Inte.pos (Pos.succ b)) = (Inte.eql (Inte.pos a) (Inte.pos b))
Inte.eql (Inte.neg (Neg.pred a)) (Inte.neg (Neg.pred b)) = (Inte.eql (Inte.neg a) (Inte.neg b))
Inte.eql a b = Bool.false //default


// Greater than
// int(false, 2) > int(false, 5) = True
// int(false, 5) > int(false, 1) = False
// int(false, 2) > int(true,  0) = False
// int(true,  0) > int(false, 2) = True
Inte.gtn (a: Inte) (b: Inte) : Bool // if A > B then True else false
Inte.gtn (Inte.pos (Pos.succ a)) (Inte.pos (Pos.zero)) = (Bool.true)
Inte.gtn (Inte.neg (Neg.one)) (Inte.neg (Neg.pred b)) = (Bool.true)
Inte.gtn (Inte.pos a) (Inte.neg b) = Bool.true
Inte.gtn (Inte.pos (Pos.succ a)) (Inte.pos (Pos.succ b)) = (Inte.gtn  (Inte.pos a)  (Inte.pos b))
Inte.gtn (Inte.neg (Neg.pred a)) (Inte.neg (Neg.pred b)) = Inte.gtn  (Inte.neg a)  (Inte.neg b)
Inte.gtn  a b = (Bool.false) //default case

// Lower than
// int(false, 1) < int(true,  0) = True
// int(true,  0) < int(false, 1) = False
Inte.ltn (a: Inte) (b: Inte) : Bool 
Inte.ltn (Inte.pos (Pos.zero)) (Inte.pos (Pos.succ b)) = Bool.true
Inte.ltn (Inte.neg (Neg.pred a)) (Inte.neg (Neg.one)) = Bool.true
Inte.ltn (Inte.neg a) (Inte.pos b) = Bool.true
Inte.ltn (Inte.pos (Pos.succ a)) (Inte.pos (Pos.succ b)) = (Inte.ltn  (Inte.pos a)  (Inte.pos b))
Inte.ltn (Inte.neg (Neg.pred a)) (Inte.neg (Neg.pred b)) = (Inte.ltn  (Inte.neg a)  (Inte.neg b))
Inte.ltn a b = Bool.false //default case

//pos0 pos1
//neg0 neg1
//neg pos
//pos pos
//neg neg
//default


// Minimum
// min(int(false, 1), int(true,  0)  = -1
// min(int(false, 1), int(false, 3)) = -3
Inte.min(a: Inte) (b: Inte): Inte 
Inte.min a b = (Bool.if (Inte.ltn a b) a b)

// Maximum
// max(int(false, 1), int(true,  0)) = +0
// max(int(false, 1), int(false, 3)) = -1
Inte.max(a: Inte) (b: Inte): Inte 
Inte.max a b = (Bool.if (Inte.gtn a b) a b)

// Half
// Divides an Integer by two
// int(false, 4) = -2
// int(false, 1) = +0
// int(true,  6) = +3
Inte.hlf (a: Inte) : Inte
Inte.hlf (Inte.neg (Neg.pred (Neg.one))) = Inte.neg (Neg.one)
Inte.hlf (Inte.neg (Neg.pred (Neg.pred a))) = Inte.dec(Inte.hlf (Inte.neg a))
Inte.hlf (Inte.pos (Pos.succ (Pos.succ a))) = Inte.inc(Inte.hlf (Inte.pos a))
Inte.hlf a = Inte.pos (Pos.zero) 

// Division
// int(true,  2)  / int(true,  2)  = +1
// int(false, 8)  / int(true,  4)  = -2
// int(false, 11) / int(false, 5)  = +2
// int(true,  10) / int(false, 12) = +0
