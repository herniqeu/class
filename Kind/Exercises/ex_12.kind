type BitsMap<A: Type> { 
  new
  tie(val: Maybe<A>, lft: BitsMap<A>, rgt: BitsMap<A>)
}

// Given a Key and a Value, sets the given value to that key in the tree, if
// that key already belongs to another value, it should be replaced with the new
// one

set<A: Type>(key: Bits, val: A, map: BitsMap<A>): Maybe<A>
 case key {
   e: case map {
     new: BitsMap.tie<A>(Maybe.some<A>(val), BitsMap.new<A>, BitsMap.new<A>) // val lft rgt 
     tie: BitsMap.tie<A>(Maybe.some<A>(val), map.lft , map.rgt) 
   } 
   i: case map { // 0 1 esquerda direita
     new: BitsMap.tie<A>(Maybe.none<A>, BitsMap.new<A>, BitsMap.set<A>(bits.pred,val, BitsMap.new<A>))
     tie: BitsMap.tie<A>(map.val, map.lft, BitsMap.set<A>(bits.pred,val,map.rgt))
   } 
   o: case map {
     new: BitsMap.tie<A>(Maybe.none<A>, BitsMap.set<A>(bits.pred,val, BitsMap.new<A>), BitsMap.new<A>)
     tie: BitsMap.tie<A>(map.val, BitsMap.set!(bits.pred, val, map.lft), map.rgt)
   }
 }



// Given a key, gets the value that correspond to the given key, 
// If there it is no value for the key, returns Maybe.none<A>

BitsMap.get<A: Type>(key: Bits, map: BitsMap<A>): Maybe<A>
case map {
   new: Maybe.none<A>
   tie: case key {
     e: map.val 
     i: BitsMap.get<A>(bits.pred,map.rgt)
     o: BitsMap.get<A>(bits.pred,map.lft)
   }
 }

//Applies a function to a Value of the specific key and returns the same map but
//with the specific value applied to the function, if the value isnt find,
//doesn't change the map

mut<A: Type>(key: Bits, fn: A -> A, map: BitsMap<A>): BitsMap<A>
  case key {
    e: case map {
      new: BitsMap.tie<A>(Maybe.none<A>, BitsMap.new!, BitsMap.new) //dont change
      tie: case map.val {
        none: BitsMap.tie<A>(Maybe.none<A>, map.lft,map.rgt)
        some: BitsMap.tie<A>(Maybe.some<A>(fn(map.val)),map.lft,map.rgt)
      }
    } 
    i: case map { // 1 direita 
      new: BitsMap.tie<A>(Maybe.none<A>,BitsMap.new<A>, BitsMap.mul<A>(bits.pred,fn,  BitsMap.new<A>))
      tie: BitsMap.tie<A>(map.val, BitsMap.mut<A>(bits.pred, fn, map.lft), map.rgt)
    }
    o: case map { // 0 esquerda
      new: BitsMap.tie<A>(Maybe.none<A>, BitsMap.new<A>, BitsMap.mut<A>(bits.pred, ini, fun, BitsMap.new<A>)),
      tie: BitsMap.tie<A>(map.val, map.lft, BitsMap.mut<A>(bits.pred, fun, map.rgt)),
    }
  }


//Deletes a Value of the map within the given key, returns the same map if no
//value is found for that key

//Receives:
  // key of the type Bits
  // map of the type BitsMap<A>
  // returns a Maybe<A>

//del<A: Type>(...)


//Verifies if has any value for the given key, if has no value returns false, if
//has the value returns true
  
//Receives:
  // key of the type Bits
  // map of the type BitsMap<A>
  // returns a Bool

//has...



//Verifies all values of the map and if they don't match the condition gets
//removed, if the condition is matched, the value and the key are kept


filter<A: Type>(cond: A -> Bool, map: BitsMap<A>): BitsMap<A>
  ?filter



//Applies a function to  all values of the map and returns the map modified 

map<A: Type, B: Type>(fn: A -> B, map: BitsMap<A>): BitsMap<B>
  ?map



// Returns a list of keys with all Keys of the map

key<A: Type>(map: BitsMap<A>): List<Bits>
  ?key



//Unites two different maps into one, keeping its structure

union<A: Type>(a: BitsMap<A>, b: BitsMap<A>): BitsMap<A>
  ?union
