//Bits

//File for exercises in Bits

//e = emptyy
//o = 0
//i = 1
type Bits { 
  e
  o(pred: Bits)
  i(pred: Bits)
}

//a = Bits.i(Bits.i(Bits.e))
//b = Bits.o(Bits.i(Bits.i(Bits.e)))
//c = Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))
//d = Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))

//Verifies if it is an Empty Bit
//is_empty(a)      -> Bool.false
//is_empty(b)      -> Bool.false
//is_empty(c)      -> Bool.false
//is_empty(d)      -> Bool.false
//is_empty(Bits.e) -> Bool.true
is_empty(b: Bits): Bool
 case b {
     e: Bool.true
 }default Bool.false

//Gets the Tail of a Bits structure
//tail(a) -> Bits.i(Bits.e)
//tail(b) -> Bits.i(Bits.i(Bits.e))
//tail(c) -> Bits.o(Bits.i(Bits.i(Bits.e)))
//tail(d) -> Bits.i(Bits.i(Bits.i(Bits.e)))
tail(b: Bits): Bits
 case b {
     e: Bits.e
 }default b.pred

//Negates all Bits
//not(a) -> Bits.o(Bits.o(Bits.e))
//not(b) -> Bits.i(Bits.o(Bits.o(Bits.e)))
//not(c) -> Bits.i(Bits.i(Bits.o(Bits.o(Bits.e))))
//not(d) -> Bits.o(Bits.o(Bits.o(Bits.o(Bits.e))))
no(b: Bits): Bits
 case b {
     e: Bits.e 
     o: Bits.i(no(b.pred))
     i: Bits.o(no(b.pred))
 }

//Increments a Bit

//inc(a) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//inc(b) -> Bits.i(Bits.i(Bits.i(Bits.e)))
//inc(c) -> Bits.i(Bits.o(Bits.i(Bits.i(Bits.e))))
//inc(d) -> Bits.o(Bits.o(Bits.o(Bits.o(Bits.i(Bits.e)))))
inc(b: Bits): Bits
 case Bits.to_nat(b) {
     zero: Nat.to_bits(Nat.succ(Nat.zero))
     succ: Nat.to_bits(Nat.succ(Bits.to_nat(b)))
 }

// inc(b: Bits): Bits
// case b {
//    e: Bits.i(Bits.e)
//    o: Bits.i(b.pred)
//    i: Bits.o(inc(b.pred))
//}

//Decrements a Bit

//dec(a) -> Bits.o(Bits.i(Bits.e))
//dec(b) -> Bits.i(Bits.o(Bits.i(Bits.e)))
//dec(c) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.e))))
//dec(d) -> Bits.o(Bits.i(Bits.i(Bits.i(Bits.e))))
dec(b: Bits): Bits
 case Bits.to_nat(b) {
     zero: Nat.to_bits(Nat.succ(Nat.zero))
     succ: Nat.to_bits(Bits.to_nat(b)-1)
 }

//dec(b: Bits): Bits
//  case b {
//    e: Bits.e
//    o: Bits.i(dec(b.pred))
//    i: Bits.o(b.pred)
//  }
 
//Concatenate two Bits structures
//concat(a,b) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.i(Bits.e)
//concat(b,c) -> Bits.o(Bits.i(Bits.i(Bits.o(Bits.o(Bits.i(Bits.i(Bits.e)))))))
//concat(c,d) -> Bits.o(Bits.o(Bits.i(Bits.i(Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))))))
concat(a: Bits, b: Bits): Bits
  case a {
      e: b 
      o: Bits.o(concat(a.pred,b))
      i: Bits.i(concat(a.pred,b))
  }
  
//Adds two Bits structures
//add(a,b) -> Bits.i(Bits.o(Bits.o(Bits.i(Bits.e))))
//add(b,c) -> Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.o(Bits.e))))))
//add(c,d) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.o(Bits.i(Bits.e))))))
add(a: Bits, b: Bits): Bits 
  case Bits.to_nat(a) Bits.to_nat(b) {
      zero zero:  Nat.to_bits(Nat.zero)
      zero succ: b
      succ zero: a
      succ succ: Nat.to_bits(Nat.add(Bits.to_nat(a),Bits.to_nat(b)))
  }

//add(a: Bits, b: Bits): Bits 
// case a {
//     e: b 
//     o: case b {
//         e: a 
//         o: Bits.o(a.pred,b.pred)
//         i: Bits.i(add(a.pred,b.pred))
//     } 
//     i: case b {
//         e: a 
//         o: Bits.i(add(a.pred,b.pred))
//         i: Bits.o(inc(add(a.pred,b.pred)))
//    }
// }

  
//Returns Bits.i if only both bits are Bits.i
//and(a,b) -> Bits.o(Bits.i(Bits.e))
//and(b,c) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//and(c,d) -> Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))
and(a: Bits,b: Bits): Bits
 case a {
     e: Bits.e 
     o: case b {
         e: Bits.e
         i: Bits.o(and(a.pred,b.pred))
         o: Bits.o(and(a.pred,b.pred))
     } 
     i: case b {
         e: Bits.e 
         i: Bits.i(and(a.pred,b.pred))
         o: Bits.o(and(a.pred,b.pred))
     }
 }

//Returns Bits.i if any of bits are Bits.i
//or(a,b) -> Bits.i(Bits.i(Bits.i(Bits.e)))
//or(b,c) -> Bits.o(Bits.i(Bits.i(Bits.i(Bits.e))))
//or(c,d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
or(a: Bits, b: Bits): Bits
  case a {
      e: Bits.e 
      o: case b {
          e: Bits.e 
          i: Bits.i(or(a.pred,b.pred))
          o: Bits.o(or(a.pred,b.pred))
      }
      i: case b {
          e: Bits.e 
          i: Bits.i(or(a.pred,b.pred))
          o: Bits.i(or(a.pred,b.pred))
      }
  }

//Verifies if both Bit structures are equal
//eql(a,b) -> Bool.false
//eql(b,c) -> Bool.false
//eql(d,d) -> Bool.true
eql(a: Bits, b: Bits): Bool
  case a {
      e: case b {
          e: Bool.true
      }default Bool.false
      i: case b {
          i: eql(a.pred,b.pred)
      }default Bool.false
      o: case b {
          o: eql(a.pred,b.pred)
      }default Bool.false
  }

//reverse(a) -> Bits.i(Bits.i(Bits.e))
//reverse(b) -> Bits.i(Bits.i(Bits.o(Bits.e)))
//reverse(c) -> Bits.i(Bits.i(Bits.o(Bits.o(Bits.e))))
//reverse(d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
reverse(b: Bits): Bits 
 reverse_go(b, Bits.e)

reverse_go(b: Bits, acum: Bits): Bits
 case b {
     e: acum
     o: reverse_go(Bits.o(acum), b.pred)
     i: reverse_go(Bits.i(acum), b.pred)
 }

//length(a) -> Nat.succ(Nat.succ(Nat.zero))
//length(b) -> Nat.succ(Nat.succ(Nat.succ(Nat.zero)))
//length(c) -> Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))
//length(d) -> 4
lenght(a: Bits): Nat
 case a {
     e: 0
 }default (1 + lenght(a.pred))

//lenght(bs: Bits): Nat 
// lenght_go(0, bs)
//
//lenght_go(acum: Nat, bs: Bits): Nat 
// case bs {
//     e: acum // final 
// }default lenght_go(bs.pred, Nat.succ(acum))

//Multiplies two Bits structures
//mul(a,b) -> Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))
//mul(b,c) -> Bits.o(Bits.o(Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))))
muly(a: Bits, b: Bits): Bits
 case Bits.to_nat(a) Bits.to_nat(b) {
     succ succ: Nat.to_bits(Nat.mul(Bits.to_nat(a), Bits.to_nat(b)))
 } default Bits.e

//Drops a n Number of Bits starting from from the least significative bit
//drop(a) -> Bits.i(Bits.e)
//drop(b) -> Bits.i(Bits.i(Bits.e))
//drop(c) -> Bits.o(Bits.i(Bits.i(Bits.e)))
//drop(d) -> Bits.i(Bits.i(Bits.i(Bits.e)))
drop(n: Nat, bs: Bits): Bits 
 case n {
     zero: bs 
     succ: case bs {
         e: Bits.e 
         o: Bits.o(drop(n.pred, bs.pred))
         i: Bits.i(drop(n.pred, bs.pred))
     }
 }

//Takes n Bits from the structure, starting from the least significative bit
//take(1, a) -> Bits.i(Bits.e)
//take(2, b) -> Bits.o(Bits.i(Bits.e))
//take(3, c) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//take(4, d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
take(n: Nat, bs: Bits): Bits 
 case n {
     zero: Bits.e 
     succ: case bs {
         e: Bits.e 
         o: Bits.o(take(n.pred,bs.pred))
         i: Bits.i(take(n.pred,bs.pred))
     }
 }
