// Advanced exercises involving Lists

type List <A: Type> {
  nil
  cons(head: A, tail: List<A>)
}

type Maybe <A: Type> {
  none
  some(value: A)
}

// Returns pairs of the elements of the 2 input lists on the same index
// Ex: zip!!([1,2], ["a","b","c"]) == [{1, "a"}, {2 , "b"}]
// Ex: zip!!(["a", "b"], [3, 5])   == [{"a", 3}, {2 , "b"}]
zip<A: Type, B: Type>(xs: List<A>, ys: List<B>): List<Pair<A,B>>
  case xs ys {
      nil nil : []
      nil cons :  []
      cons nil : []
      cons cons: List.cons!(Pair.new!!(xs.head, ys.head), zip!!(xs.tail, ys.tail))
  }

// Returns the smallest element of a List
smallest(xs: List<Nat>): Nat
 case xs {
   nil: 0
   cons: case xs.tail {
     nil: xs.head
     cons: case Nat.ltn(xs.head,xs.tail.head) { // caso xs.tail.head seja maior q xs.head [x0,x1,x2,...,xn] x1>x0
       true: smallest(List.cons!(xs.head, xs.tail.tail)) // como x1>x0 ele ta fora da jogada
       false: smallest(xs.tail) // aq ele ta dentro da jogada 
     }
   }
 }
 -----------------------------------------------------------------------------------------------------------------------
 
 reverse<A: Type>(xs: List<A>): List<A>
  reverse.go<A>(List.nil<A>, xs)

reverse.go<A: Type>(new_list: List<A>, old_list: List<A>): List<A>
  case old_list {
      nil: new_list
      cons: reverse.go!(List.cons!(old_list.head,new_list), old_list.tail)
  }

length<A: Type>(xs: List<A>): Nat
  case xs {
      nil: 0
      cons: Nat.succ(lenght!(xs.tail)) // tamanho do final + 1
  }

String.equal(to_remove: String, str: String): Bool 
 case str {
     nil: case to_remove {
         nil: true
         cons: false
     }
     cons: case Char.eql(to_remove.head,str) {
         true: String.equal(to_remove.tail,str.tail)
         false: String.equal(to_remove,str.tail)
     }
 }

find(to_remove: String,str: String,acum: String): String 
 case str {
    nil: String.nil 
    cons: case to_remove {
        nil: String.cons(reverse(acum.tail),str) // pega o q sobrou se Nat.gtn(lenght(to_remove),lenght(to_add)) for false 
        cons: case String.equal(to_remove, str) {
            true:  case Char.eql(to_remove.head,str.head) {
                true: String.cons(to_add.head,find(to_remove.tail,str.tail,String.cons(to_add[lenght(to_add)-1],acum))) // caso subsituir e sub 
                false: String.cons(to_remove.head,find(to_remove.tail,str.tail,acum))
            }
            false: str // caso de nn ter a palavra dentro 
        } 
        }
    }

