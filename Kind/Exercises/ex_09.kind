// Advanced exercises involving Lists

type List <A: Type> {
  nil
  cons(head: A, tail: List<A>)
}

type Maybe <A: Type> {
  none
  some(value: A)
}

// Returns pairs of the elements of the 2 input lists on the same index
// Ex: zip!!([1,2], ["a","b","c"]) == [{1, "a"}, {2 , "b"}]
// Ex: zip!!(["a", "b"], [3, 5])   == [{"a", 3}, {2 , "b"}]
zip<A: Type, B: Type>(xs: List<A>, ys: List<B>): List<Pair<A,B>>
  case xs ys {
      nil nil : []
      nil cons :  []
      cons nil : []
      cons cons: List.cons!(Pair.new!!(xs.head, ys.head), zip!!(xs.tail, ys.tail))
  }

// Returns the smallest element of a List
smallest(xs: List<Nat>): Nat
 case xs {
   nil: 0
   cons: case xs.tail {
     nil: xs.head
     cons: case Nat.ltn(xs.head,xs.tail.head) { // caso xs.tail.head seja maior q xs.head [x0,x1,x2,...,xn] x1>x0
       true: smallest(List.cons!(xs.head, xs.tail.tail)) // como x1>x0 ele ta fora da jogada
       false: smallest(xs.tail) // aq ele ta dentro da jogada 
     }
   }
 }
 --------------------------------------------------------------------------------
 // Basic exercises involving Lists

type List <A: Type> {
  nil
  cons(head: A, tail: List<A>)
}

// Returns the head of the List
head<A: Type>(xs: List<A>): Maybe<A>
head<A: type>(xs: List<A>): Maybe<A>
 case xs {
     nil: 0
     cons: xs.head
 }

// Returns the list without the first element
tail<A: Type>(xs: List<A>): List<A>
  tail<A: type>(xs: List<A>): Maybe<A>
 case xs {
     nil: 0
     cons: xs.tail
 }

// Returns the length of a list
length<A: Type>(xs: List<A>): Nat
lenght<A: Type>(xs: List<A>): Nat 
 case xs {
     nil: 0
     cons: Nat.succ(lenght(xs.tail))
 }

// Returns the last element of a list
last<A: Type>(xs: List<A>): Maybe<A>
 xs[lenght(xs)-1]

// Returns the list without the last element
init<A: Type>(xs: List<A>): List<A>
 case xs {
     nil: []
     cons: case xs.tail {
         nil: []
         cons: List.cons!(xs.head,init(xs.tail))
     }
 }

// Concatenates two lists
concat<A: Type>(xs: List<A>, ys: List<A>): List<A>
   case xs {
      nil: ys
      cons: List.cons!(xs.head, concat!(xs.tail, ys))
  }
// Removes n elements from the start of the list
// List.drop<Nat>(3, [1,2,3,4,5]) -> [4, 5]
drop<A: Type>(n: Nat, xs: List<A>): List<A> 
  case xs {
      nil: []
      cons: case n {
          zero: xs 
          succ: primeiro(n.pred,xs.tail)
      }
}

// Creates a new list with the N first elements of the previous list
// List.take<Nat>(3, [1,2,3,4,5]) -> [1,2,3]
take<A: Type>(n: Nat, xs: List<A>): List<A>
 case n {
     zero: xs 
     succ: take(n.pred, init(xs))
 }

// Applies a function to all elements of a list
map<A: Type, B: Type>(fn: A -> B, xs: List<A>): List<B>
  case xs {
      nil: []
      cons: List.cons!(fn(xs.head), map!!(fn,xs.tail))
  }

// Returns the same list, with the order reversed
reverse<A: Type>(xs: List<A>): List<A>
  reverse.go<A>(List.nil<A>, xs)

reverse.go<A: Type>(new_list: List<A>, old_list: List<A>): List<A>
  case old_list {
      nil: new_list
      cons: reverse.go!(List.cons!(old_list.head,new_list), old_list.tail)
  }


// Returns the same list without the smallest element
delete_smallest(xs: List<Nat>): List<Nat>
  case xs {
    nil: []
    cons: case Nat.eql(xs.head, smallest(xs)) { // o ponto de tirar da lista Ã© ~ transformar ele em head e xs.tail
      true: xs.tail
      false: List.cons!(xs.head,delete_smallest(xs.tail))
    }
  }
  
  // Returns the same list, in ascending order
sort_ascending(xs: List<Nat>): List<Nat>
  ?a

// Returns an element at an index from the list
// if there is an element at that index
//   returns Maybe.some!(element)
// else
//   returns Maybe.none!
get<A: Type>(idx: Nat, xs: List<A>): Maybe<A>
  ?g

// Removes all elements that does not match a condition
// List.filter<Nat>(Nat.odd, [1, 2, 3, 4, 5]) = [1, 3, 5]
filter<A: Type>(f: A -> Bool, xs: List<A>): List<A>
  ?f
