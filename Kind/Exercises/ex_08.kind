// Basic exercises involving Lists

type List <A: Type> {
  nil
  cons(head: A, tail: List<A>)
}

// Returns the list without the first element
tail<A: Type>(xs: List<A>): List<A>
  case xs {
      nil: []
      cons: xs.tail // anota no bizuario mermao
  }

// Returns the length of a list
length<A: Type>(xs: List<A>): Nat
  case xs {
      nil: 0
      cons: Nat.succ(lenght!(xs.tail)) // tamanho do final + 1
  }

// Concatenates two lists
concat<A: Type>(xs: List<A>, ys: List<A>): List<A>
  case xs {
      nil: ys
      cons: List.cons!(xs.head, concat!(xs.tail, ys))
  }

// Applies a function to all elements of a list
map<A: Type, B: Type>(fn: A -> B, xs: List<A>): List<B>
  case xs {
      nil: []
      cons: List.cons!(fn(xs.head), map!!(fn,xs.tail))
  }

// Returns the same list, with the order reversed
reverse<A: Type>(xs: List<A>): List<A>
  reverse.go<A>(List.nil<A>, xs)

reverse.go<A: Type>(new_list: List<A>, old_list: List<A>): List<A>
  case old_list {
      nil: new_list
      cons: reverse.go!(List.cons!(old_list.head,new_list), old_list.tail)
  }
  
  -------------------
   // Basic exercises involving Lists

type List <A: Type> {
  nil
  cons(head: A, tail: List<A>)
}

// Returns the head of the List
head<A: Type>(xs: List<A>): Maybe<A>
head<A: type>(xs: List<A>): Maybe<A>
 case xs {
     nil: 0
     cons: xs.head
 }

// Returns the list without the first element
tail<A: Type>(xs: List<A>): List<A>
  tail<A: type>(xs: List<A>): Maybe<A>
 case xs {
     nil: 0
     cons: xs.tail
 }

// Returns the length of a list
length<A: Type>(xs: List<A>): Nat
lenght<A: Type>(xs: List<A>): Nat 
 case xs {
     nil: 0
     cons: Nat.succ(lenght(xs.tail))
 }

// Returns the last element of a list
last<A: Type>(xs: List<A>): Maybe<A>
 xs[lenght(xs)-1]

// Returns the list without the last element
init<A: Type>(xs: List<A>): List<A>
 case xs {
     nil: []
     cons: case xs.tail {
         nil: []
         cons: List.cons!(xs.head,init(xs.tail))
     }
 }

// Concatenates two lists
concat<A: Type>(xs: List<A>, ys: List<A>): List<A>
   case xs {
      nil: ys
      cons: List.cons!(xs.head, concat!(xs.tail, ys))
  }
// Removes n elements from the start of the list
// List.drop<Nat>(3, [1,2,3,4,5]) -> [4, 5]
drop<A: Type>(n: Nat, xs: List<A>): List<A> 
  case xs {
      nil: []
      cons: case n {
          zero: xs 
          succ: primeiro(n.pred,xs.tail)
      }
}

// Creates a new list with the N first elements of the previous list
// List.take<Nat>(3, [1,2,3,4,5]) -> [1,2,3]
take<A: Type>(n: Nat, xs: List<A>): List<A>
 case n {
     zero: xs 
     succ: take(n.pred, init(xs))
 }

// Applies a function to all elements of a list
map<A: Type, B: Type>(fn: A -> B, xs: List<A>): List<B>
  case xs {
      nil: []
      cons: List.cons!(fn(xs.head), map!!(fn,xs.tail))
  }

// Returns the same list, with the order reversed
reverse<A: Type>(xs: List<A>): List<A>
  reverse.go<A>(List.nil<A>, xs)

reverse.go<A: Type>(new_list: List<A>, old_list: List<A>): List<A>
  case old_list {
      nil: new_list
      cons: reverse.go!(List.cons!(old_list.head,new_list), old_list.tail)
  }

