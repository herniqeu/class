// Piece
type TicTacToe.Piece {
  O
  X
}

// Game state
type TicTacToe {
  new(
    turn: Nat
    board: List<List<Maybe<TicTacToe.Piece>>>
  )
}

TicTacToe.init: TicTacToe
  TicTacToe.new(0, [[none, none, none],
                    [none, none, none],
                    [none, none, none]])

TicTacToe.get(x: Nat, y: Nat, game: TicTacToe): Maybe<TicTacToe.Piece>
  open game
  let line = game.board[y] <> []
  let elem = line[x] <> none
  elem

TicTacToe.Piece.to_string(a: Maybe<TicTacToe.Piece>): String
  case a {
    some: case a.value {
      O: "O"
      X: "X"
  }
}default " "

TicTacToe.next_piece(game: TicTacToe): TicTacToe.Piece
  open game
  if Nat.is_even(game.turn) then   
    TicTacToe.Piece.O
  else
    TicTacToe.Piece.X

TicTacToe.move(coord: Pair<Nat, Nat>, game: TicTacToe): TicTacToe
  open game
  let piece = TicTacToe.next_piece(game)
  let line = game.board[y] <> []
  let new_line = line[x] <- some(piece)
  let new_board = game.board[y] <- new_line
  TicTacToe.new(Nat.succ(game.turn), new_board)

TicTacToe.read(line: String): List<Nat>
  if String.eql(line, "") then []
  else
    let chars = String.split(line," ")
    let nats = List.map!!(Nat.read, chars)
    List.take!(2, nats)

TicTacToe.Piece.eql(a: Maybe<TicTacToe.Piece>, b: Maybe<TicTacToe.Piece>): Bool
	case a b {
    X X: Bool.true
    O O: Bool.true
    O X : Bool.false
    X O: Bool.false
  } 

TicTacToe.winner(game: TicTacToe): Maybe<TicTacToe.Piece> 
  a?

TicTacToe.show(game: TicTacToe): String
  open game
  let a = game
  let b = TicTacToe.get
  let board = " " |
    TicTacToe.Piece.to_string(TicTacToe.get(0,0,game)) | " | " | TicTacToe.Piece.to_string(TicTacToe.get(0,1,game)) | " | " | TicTacToe.Piece.to_string(TicTacToe.get(0,2,game)) | 
    TicTacToe.Piece.to_string(TicTacToe.get(1,0,game)) | " | " | TicTacToe.Piece.to_string(TicTacToe.get(1,1,game)) | " | " | TicTacToe.Piece.to_string(TicTacToe.get(1,2,game)) | 
    TicTacToe.Piece.to_string(TicTacToe.get(2,0,game)) | " | " | TicTacToe.Piece.to_string(TicTacToe.get(2,1,game)) | " | " | TicTacToe.Piece.to_string(TicTacToe.get(2,2,game)) | 
    board


Test: IO<Unit>
  IO {
    // Prints the initial board
    let ttt = TicTacToe.init
    IO.print(TicTacToe.show(ttt))
    TicTacToe.play(ttt)
  }


// Do not edit below this line 
TicTacToe.play(game: TicTacToe): IO<Unit>
  IO {
    IO.print("Where do you wanna move?")
    // Receives user input
    get line = IO.get_line
    
		// Converts input into coordinates
		let coords = TicTacToe.read(line)

		get game = 
			case coords {
				none: IO {
					IO.print("Invalid entry")
					return game
				}	
				some:
					// Checks if a movement is valid
					let is_move_valid = TicTacToe.is_move_valid(coords.value, game)

					if is_move_valid then IO {
						// Returns the game after 
						let new_game = TicTacToe.move(coords.value, game)
						return new_game
					}
					else IO {
						IO.print("You cannot play there!")
						return game
					}
			}

    // Prints the result
    IO.print(TicTacToe.show(game))

    // Checks who is the winner
    let Winner = TicTacToe.winner(game)
    open game

    // If there is no winner, checks if its a draw
    case Winner { 
      none: 
        if Nat.eql(game.turn, 9) then
          IO.print("Draw!")
        else TicTacToe.play(game)
      some: case Winner.value { 
        X: IO.print("X Wins!")
        O: IO.print("O Wins!")
      }
    }
  }
